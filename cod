import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import subprocess
import threading
import os
from queue import Queue
`
class YouTubeDownloader:
    def __init__(self, root):
        self.root = root
        self.root.title("YouTube Downloader Pro")
        self.root.geometry("600x400")
        
        # Variabile pentru control
        self.download_process = None
        self.log_queue = Queue()
        
        # Frame principal
        self.main_frame = ttk.Frame(root, padding="20")
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Secțiunea URL
        ttk.Label(self.main_frame, text="Introdu link-ul YouTube:").pack(pady=5)
        self.url_entry = ttk.Entry(self.main_frame, width=70)
        self.url_entry.pack(pady=5)
        
        # Butoane
        self.button_frame = ttk.Frame(self.main_frame)
        self.button_frame.pack(pady=10)
        
        self.start_button = ttk.Button(
            self.button_frame, 
            text="Start Descărcare", 
            command=self.start_download
        )
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = ttk.Button(
            self.button_frame, 
            text="Stop Aplicație", 
            command=self.stop_app
        )
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        # Progress Bar
        self.progress = ttk.Progressbar(
            self.main_frame, 
            orient="horizontal", 
            length=400, 
            mode="determinate"
        )
        self.progress.pack(pady=10)
        
        # Log Box
        ttk.Label(self.main_frame, text="Log-uri:").pack(pady=5)
        self.log_text = scrolledtext.ScrolledText(
            self.main_frame, 
            width=70, 
            height=10, 
            state="disabled"
        )
        self.log_text.pack()
        
        # Status Bar
        self.status_var = tk.StringVar()
        self.status_var.set("Gata de descărcare")
        self.status_bar = ttk.Label(
            self.main_frame, 
            textvariable=self.status_var, 
            relief=tk.SUNKEN
        )
        self.status_bar.pack(fill=tk.X, pady=10)
        
        # Verifică log-urile periodic
        self.root.after(100, self.update_log)
    
    def start_download(self):
        url = self.url_entry.get().strip()
        if not url:
            messagebox.showerror("Eroare", "Te rog introdu un link YouTube!")
            return
        
        self.status_var.set("Se descarcă...")
        self.start_button.config(state=tk.DISABLED)
        self.progress["value"] = 0
        self.log_text.config(state="normal")
        self.log_text.delete(1.0, tk.END)
        self.log_text.config(state="disabled")
        
        # Rulează descărcarea într-un thread separat
        download_thread = threading.Thread(
            target=self.run_yt_dlp, 
            args=(url,), 
            daemon=True
        )
        download_thread.start()
    
    def run_yt_dlp(self, url):
        try:
            # Folosește yt-dlp și capturează output-ul în timp real
            self.download_process = subprocess.Popen(
                [
                    "yt-dlp",
                    "-x",  # Extrage audio
                    "--audio-format", "mp3",
                    "--audio-quality", "0",
                    "-o", os.path.expanduser("~/Downloads/%(title)s.%(ext)s"),
                    "--newline",  # Pentru a parsa liniile în timp real
                    url
                ],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True
            )
            
            # Citire output în timp real
            for line in iter(self.download_process.stdout.readline, ""):
                self.log_queue.put(line)
                # Simulare progres (yt-dlp nu oferă % exact)
                if "[download]" in line and "%" in line:
                    percent = line.split("%")[0].split()[-1]
                    try:
                        self.progress["value"] = float(percent)
                    except ValueError:
                        pass
            
            self.download_process.wait()
            self.log_queue.put("\nDescărcare completă!\n")
            self.status_var.set("Descărcare completă!")
        except Exception as e:
            self.log_queue.put(f"Eroare: {str(e)}\n")
            self.status_var.set("Eroare la descărcare")
        finally:
            self.start_button.config(state=tk.NORMAL)
    
    def update_log(self):
        """Actualizează log-urile din Queue în TextBox."""
        while not self.log_queue.empty():
            line = self.log_queue.get()
            self.log_text.config(state="normal")
            self.log_text.insert(tk.END, line)
            self.log_text.see(tk.END)
            self.log_text.config(state="disabled")
        self.root.after(100, self.update_log)
    
    def stop_app(self):
        if self.download_process and self.download_process.poll() is None:
            self.download_process.terminate()
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = YouTubeDownloader(root)
    root.mainloop()  
